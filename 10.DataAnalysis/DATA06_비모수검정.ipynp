{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyOoUll9nVjDmv4grHhb+v4Y",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jhportfolio1/MsAiSchool10_StatisticalData/blob/main/DATA05_%EB%B9%84%EB%AA%A8%EC%88%98%EA%B2%80%EC%A0%95.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. 비모수 검정"
      ],
      "metadata": {
        "id": "rZdcYnA-p1k-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">## 1) 비모수 검정 개념\n",
        ">- 모집단의 분포형태, 모수(모집단의 평균, 분산)가 정확히 알려져있지 않은 경우 사용\n",
        ">- 모집단의 분포가 정규분포 따르지 않는 경우에 사용\n",
        ">- 자료의 순위(rank)를 이용해 검정 수행\n",
        ">- 장점 : 데이터 분포/크기에 대한 가정 필요없음, 데이터 작아도 사용가능\n",
        ">- 단점 : 데이터 검정력이 낮을 수 있음, 정보 손실 가능성"
      ],
      "metadata": {
        "id": "tNJerRTap3_S"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">## 2) 모수 검정 vs 비모수 검정"
      ],
      "metadata": {
        "id": "xUc5hG0hqhPg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>### (1) 모수검정\n",
        ">>- 모집단 분포가 정규분포/특정한 분포 따른다는 가정\n",
        ">>- 표본 푱균, 분산 이용하여 모집단 모수 추론하는 방법\n",
        ">>- t검정, f검정, 카이제곱 검정"
      ],
      "metadata": {
        "id": "3XAG7iuZqoNr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>### (2) 비모수검정\n",
        ">>- 모집단 분포 형태 가정하지 않음\n",
        ">>- 자료의 순위/분호 이용하여 검정\n",
        ">>- 모집단 형태 불명확할 때 사용\n",
        ">>- 윌콕슨의 부호 순위 검정, 맨-위트니 검정, 부트스트랩 검정"
      ],
      "metadata": {
        "id": "2fGZjiqBqzLp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">## 3) 모수검정, 비모수검정 간단한 실습"
      ],
      "metadata": {
        "id": "osZJyuzDrACE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy import stats\n",
        "\n",
        "# 두 집단의 데이터 생성\n",
        "# 여기서는 랜덤하게 생성된 정규분포 사용\n",
        "np.random.seed(42)\n",
        "\n",
        "# 모수 검정용 데이터 생성\n",
        "n = 100\n",
        "mu1, mu2 = 0, 0.5\n",
        "sigma = 1\n",
        "data1 = np.random.normal(mu1, sigma, n)\n",
        "data2 = np.random.normal(mu2, sigma, n)\n",
        "\n",
        "# 비모수 검정용 데이터 생성\n",
        "m = 30\n",
        "data3 = np.random.uniform(0, 1, m)\n",
        "data4 = np.random.uniform(0.5, 1.5, m)\n",
        "\n",
        "print(data1)\n",
        "print(data2)\n",
        "print(data3)\n",
        "print(data4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9IEokJSVp2zV",
        "outputId": "6e0f362a-e508-4507-c1f0-b54ea0461977"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 0.49671415 -0.1382643   0.64768854  1.52302986 -0.23415337 -0.23413696\n",
            "  1.57921282  0.76743473 -0.46947439  0.54256004 -0.46341769 -0.46572975\n",
            "  0.24196227 -1.91328024 -1.72491783 -0.56228753 -1.01283112  0.31424733\n",
            " -0.90802408 -1.4123037   1.46564877 -0.2257763   0.0675282  -1.42474819\n",
            " -0.54438272  0.11092259 -1.15099358  0.37569802 -0.60063869 -0.29169375\n",
            " -0.60170661  1.85227818 -0.01349722 -1.05771093  0.82254491 -1.22084365\n",
            "  0.2088636  -1.95967012 -1.32818605  0.19686124  0.73846658  0.17136828\n",
            " -0.11564828 -0.3011037  -1.47852199 -0.71984421 -0.46063877  1.05712223\n",
            "  0.34361829 -1.76304016  0.32408397 -0.38508228 -0.676922    0.61167629\n",
            "  1.03099952  0.93128012 -0.83921752 -0.30921238  0.33126343  0.97554513\n",
            " -0.47917424 -0.18565898 -1.10633497 -1.19620662  0.81252582  1.35624003\n",
            " -0.07201012  1.0035329   0.36163603 -0.64511975  0.36139561  1.53803657\n",
            " -0.03582604  1.56464366 -2.6197451   0.8219025   0.08704707 -0.29900735\n",
            "  0.09176078 -1.98756891 -0.21967189  0.35711257  1.47789404 -0.51827022\n",
            " -0.8084936  -0.50175704  0.91540212  0.32875111 -0.5297602   0.51326743\n",
            "  0.09707755  0.96864499 -0.70205309 -0.32766215 -0.39210815 -1.46351495\n",
            "  0.29612028  0.26105527  0.00511346 -0.23458713]\n",
            "[-0.91537074  0.07935468  0.15728548 -0.30227727  0.33871429  0.90405086\n",
            "  2.3861859   0.67457781  0.75755039  0.42555408 -1.41877122  0.47348612\n",
            "  0.56023021  2.96324211  0.30763904  0.80154734  0.46528823 -0.66867804\n",
            "  1.64282281  1.25193303  1.29103195 -0.40938745  1.90279431 -0.90185106\n",
            "  1.08685709  2.69045563 -0.49053633 -0.06629773  0.59965137 -0.00347565\n",
            " -1.05066343  0.56856297 -0.56230371  0.97359243 -0.41942423  2.04993441\n",
            " -0.28325329  0.17793848  1.31351722 -0.73086432  0.72745993  1.80714275\n",
            " -1.10748323  0.68463386  0.75988279  1.28182287 -0.73695071 -0.82045661\n",
            "  1.02194157  0.79698467  0.75049285  0.84644821 -0.18002472  0.7322537\n",
            "  0.79307247 -0.21435142  2.36577451  0.97383292 -0.6913035   1.15655361\n",
            " -0.47468167  1.2870846   1.65859558 -0.32068232  1.46337613  0.91278093\n",
            "  1.32206016  2.39679298  0.25461188 -0.25373616 -0.38951443 -0.31581028\n",
            "  0.42289829  0.84115197  0.7766908   1.32718325  0.51300189  1.95353408\n",
            "  0.23534317  3.22016917  1.12566735 -0.35715756 -0.5708925   0.98247242\n",
            "  0.27653721  1.21400049  0.97323762  0.42717109 -0.34679372 -1.01484722\n",
            "  0.05348505  1.35639879  0.71409374 -0.74573878  0.67318093  0.88531738\n",
            " -0.38385744  0.65372511  0.55820872 -0.6429703 ]\n",
            "[0.87737307 0.74076862 0.69701574 0.70248408 0.35949115 0.29359184\n",
            " 0.80936116 0.81011339 0.86707232 0.91324055 0.5113424  0.50151629\n",
            " 0.79829518 0.64996393 0.70196688 0.79579267 0.89000534 0.33799516\n",
            " 0.37558295 0.09398194 0.57828014 0.03594227 0.46559802 0.54264463\n",
            " 0.28654125 0.59083326 0.03050025 0.03734819 0.82260056 0.36019064]\n",
            "[0.62706051 1.02224326 1.26999355 0.71582103 1.12289048 0.58534746\n",
            " 0.55168172 1.03135463 1.04063512 1.1374299  1.22609133 1.47585208\n",
            " 1.01630035 0.82295647 1.29518619 0.77083225 0.93897142 0.57845638\n",
            " 0.52535074 1.46264841 1.33598012 1.19597421 0.90895294 0.67329432\n",
            " 0.65643704 0.7502429  1.04922666 1.21459592 1.16019738 0.7799339 ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#모수 검정 실습\n",
        "\n",
        "#T-test (T-stat 작을수록 두 집단 차이 작다 / p-value 5% 이하일때 채택)\n",
        "t_stat, p_val = stats.ttest_ind(data1, data2)\n",
        "print(\"t_statistic: {:.3f}, p-value: {:.3f}\".format(t_stat, p_val))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mVXul2cQrpT8",
        "outputId": "42966e99-1e23-40d6-ff9a-03f5ff4707f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "t_statistic: -4.755, p-value: 0.000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#비모수 검정 실습\n",
        "\n",
        "#mann-whiteny U검정\n",
        "u_stat, p_val = stats.mannwhitneyu(data3, data4)\n",
        "print(\"U statistic: {:.3f}, p-value: {:.3f}\".format(u_stat, p_val))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uUL622TsuLLp",
        "outputId": "f60f755b-bcb2-4b49-e392-0ee099d0cc6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "U statistic: 145.000, p-value: 0.000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ">## 4) 비모수 검정 방법"
      ],
      "metadata": {
        "id": "YwbNoGTxvBho"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>### (1) 부호검정(Sign Test)"
      ],
      "metadata": {
        "id": "OI9sA5FcvJxm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ① 부호검정 개념\n",
        ">>>- 모집단의 분포에 대한 가정 없이 두개의 집단이 같은 분포 가지고 있는지 검정\n",
        ">>>- 부호검정 두 개의 집단에서 각각 쌍을 이루는 데이터에 대해, 그 값의 차이가 0인 경우 부호 생략"
      ],
      "metadata": {
        "id": "AMvwCHvdvsGV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ② 부호검정 순서 및 수행방법 설명\n",
        ">>>- 귀무가설, 대립가설 설정 \n",
        ">>>- 차이값계산 : 대응된 측정값 쌍을 뺀뒤 부호를 할당하는 방법\n",
        ">>>- 부호와 차이 값의 짝 맞춤\n",
        ">>>- 부호 랭크 계산 : 차이 값이 0아닌 경우 부호랭크를 계산\n",
        ">>>- 부호합 계산 : 부호랭크합 계산\n",
        ">>>- 윌콕슨 부호 순위합검정 수행(얼마나 극단적인가)\n",
        ">>>- p_value 계산 : 윌콕슨부호 순위합 검정 통해 계산된 검정통계량에 대한 p-value 계산\n",
        ">>>- 결론 도출 : 계산된 p-value를 유의수준과 비교하여 귀무가설 기각/채택 결정"
      ],
      "metadata": {
        "id": "gUYgy_gYvw9P"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ③ 부호검정 실습\n"
      ],
      "metadata": {
        "id": "xMFtVoCdwOqY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.stats import binom_test\n",
        "\n",
        "# 가상의 데이터 생성\n",
        "np.random.seed(42)\n",
        "n = 20\n",
        "mu = 9\n",
        "data = np.random.normal(mu, size=n)\n",
        "print(data)\n",
        "\n",
        "#검정할 값(mu0) 설정\n",
        "mu0 = 9\n",
        "\n",
        "#mu0보다 큰 값의 개수 계산\n",
        "n_above_mu0 = sum(data>mu0)\n",
        "\n",
        "#부호검정\n",
        "p_value = binom_test(n_above_mu0, n=n)\n",
        "\n",
        "print(f\"data above mu0: {n_above_mu0}\")\n",
        "print(f\"binom test result: {p_value}\")\n",
        "\n",
        "if p_value > 0.05:\n",
        "  print(\"귀무가설채택\")\n",
        "else:\n",
        "  print(\"귀무가설기각\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4MA8ujUJweYx",
        "outputId": "2de1164c-6d7e-4849-a9e3-04b6fecad30b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 9.49671415  8.8617357   9.64768854 10.52302986  8.76584663  8.76586304\n",
            " 10.57921282  9.76743473  8.53052561  9.54256004  8.53658231  8.53427025\n",
            "  9.24196227  7.08671976  7.27508217  8.43771247  7.98716888  9.31424733\n",
            "  8.09197592  7.5876963 ]\n",
            "data above mu0: 8\n",
            "binom test result: 0.5034446716308594\n",
            "귀무가설채택\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-10-c7cc29bd3eff>:18: DeprecationWarning: 'binom_test' is deprecated in favour of 'binomtest' from version 1.7.0 and will be removed in Scipy 1.12.0.\n",
            "  p_value = binom_test(n_above_mu0, n=n)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>### (2) 비모수 검정 - 윌콕슨 부호 순위 검정 (Wilcoxon Signed Rank Test)"
      ],
      "metadata": {
        "id": "poLwfGuwvjWO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ① 개념\n",
        ">>>- 두개의 짝 데이터에 대한 비모수적인 검정 방법\n",
        ">>>- 중앙값 차이에 대한 가설 검정\n",
        ">>>- a. 두 개의 짝 데이터는 서로 독립이 아닌 관련이 있음\n",
        ">>>- b. 두 개의 짝 데이터는 쌍을 이루고 쌍 간의 순서는 중요치 않음\n",
        ">>>- c. 두 개의 짝 데이터 차이는 대칭적으로 분포하고 이상치가 적음"
      ],
      "metadata": {
        "id": "U_g0tjurmbt8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ② 윌콕슨 부호 순위 검정\n",
        ">>>- 표본 크기 작도 모집단이 정규분포 따를 때 사용\n",
        ">>>- 귀무가설 : 중앙값은 모집단의 기대값과 같다\n",
        ">>>- 대립가설 : 중앙값은 모집단의 기대값과 다르다\n",
        ">>>- 검정통계량 : 관측값의 부호 고려하여 순위갑(rank sum) 계산\n"
      ],
      "metadata": {
        "id": "_mVi9sZtm2dO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ③ 윌콕슨 부호 순위검정 실습\n",
        ">>>- 가정1 : 변수가 서열 척도를 가지고 있다.\n",
        ">>>- 가정2 : 변수는 두개의 조건에서 측정된다.\n",
        ">>>- 변수의 차이는 중앙값이 아니라 중위수(median) 기준으로 한다.\n",
        ">>>- 용어 '서열척도' : 연구 대상 간의 상대적인 순서 측정 정도"
      ],
      "metadata": {
        "id": "3Xbuo6oWnNuJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.stats import wilcoxon\n",
        "\n",
        "#데이터생성\n",
        "data1 = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65]\n",
        "data2 = [10, 20, 25, 30, 35, 40, 45, 50, 55, 60]"
      ],
      "metadata": {
        "id": "vGDE1cvru3qo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#윌콕슨 부호 순위 검정 수행\n",
        "#stat은 두 집단 간의 순위차이 나타냄\n",
        "#p는 윌콕슨 순위검정 결과에서 귀무가설 기각할 수 있는 유의성 나타냄\n",
        "stat, p = wilcoxon(data1, data2)\n",
        "\n",
        "#두 집단이 유사도와 stat은 음의 관계임\n",
        "print(stat, p)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j55yqrTOoiag",
        "outputId": "d50430e3-fc11-4d7e-c266-faef270078b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0 0.001953125\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#결과출력\n",
        "print('Wilcoxon Signed Rank Test')\n",
        "print('Statistic:', stat)\n",
        "print('p-value',p)\n",
        "\n",
        "if p > 0.05:\n",
        "  print('Same Distribution (fail to reject H0)')\n",
        "else:\n",
        "  print('Difference Distribution (reject H0)')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BnkJ3wfoojs4",
        "outputId": "75425b21-8196-4ca3-97e9-91eba347efa8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Wilcoxon Signed Rank Test\n",
            "Statistic: 0.0\n",
            "p-value 0.001953125\n",
            "Difference Distribution (reject H0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ④ 윌콕슨 부호 순위검정 실습2\n",
        ">>>- 환자의 치료 전과 후를 비교하여 효과성을 검증하는 코드 실습"
      ],
      "metadata": {
        "id": "5nQOjcoIp8Fr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#랜덤값으로 더미데이터 파일 생성\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from scipy.stats import wilcoxon\n",
        "\n",
        "#치료 전후 데이터 생성\n",
        "pre_treatment = np.random.randint(1, 10, size=20)\n",
        "post_treatment = pre_treatment + np.random.randint(-3, 4, size=20)\n",
        "\n",
        "#데이터프레임 저장\n",
        "data = pd.DataFrame({'pre_treatment': pre_treatment, 'post_treatment': post_treatment})\n",
        "data.to_csv('treatment_data.csv', index=False)"
      ],
      "metadata": {
        "id": "W82CN-_sqtug"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#데이터 불러오기\n",
        "data = pd.read_csv('treatment_data.csv')\n",
        "\n",
        "#윌콕슨 부호 순위 검정 수행\n",
        "stat, p = wilcoxon(data['pre_treatment'], data['post_treatment'])\n",
        "\n",
        "#결과 출력\n",
        "print('Statistic:', stat)\n",
        "print('p-values:', p)\n",
        "if p > 0.05:\n",
        "  print('fail to reject H0')\n",
        "else:\n",
        "  print('reject H0')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mlDkVQGRrOmR",
        "outputId": "db3fbc9a-3753-4108-a9c4-69c730737480"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Statistic: 69.5\n",
            "p-values: 0.7371541888262461\n",
            "fail to reject H0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_morestats.py:3414: UserWarning: Exact p-value calculation does not work if there are zeros. Switching to normal approximation.\n",
            "  warnings.warn(\"Exact p-value calculation does not work if there are \"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#boxplot 그리기\n",
        "fig, ax = plt.subplots()\n",
        "data.boxplot(['pre_treatment', 'post_treatment'], ax=ax)\n",
        "ax.set_title('Boxplot of Pre-treatment and Post-treatment')\n",
        "ax.set_ylabel('Treatment Score')\n",
        "plt.show()\n",
        "\n",
        "#두 변수 차이에 대한 분포 시각화\n",
        "fig, ax = plt.subplots()\n",
        "data['diff'] = data['post_treatment'] - data['pre_treatment']\n",
        "ax.hist(data['diff'], bins=10)\n",
        "ax.set_title('Distribution of Differences')\n",
        "ax.set_xlabel('Difference')\n",
        "ax.set_ylabel('Frequency')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 907
        },
        "id": "0pbhXXN3o2BV",
        "outputId": "ee6c3aaa-fc72-4646-f889-304036cf56f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑤ 정규분포 따르지 않는 윌콕슨 부호 순위 검정 활용\n",
        ">>>- 정규성 가정 만족하지 않는(종모양아님) 자료에서 검정\n",
        ">>>- t-test 같은 모수적인 방법 사용 불가함\n",
        ">>>- 다중검정 수행할때 활용"
      ],
      "metadata": {
        "id": "sNwJ22G4tZnr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑥ 정규분포 따르지 않는 윌콕슨 부호 순위 검정 실습"
      ],
      "metadata": {
        "id": "I5al_ok-tt5Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "np.random.seed(123)\n",
        "\n",
        "#정규분포 따르지 않는 데이터 생성\n",
        "pre_treatment = np.random.rand(20) + 1\n",
        "post_treatment = np.random.rand(20) + 2\n",
        "\n",
        "#데이터프레임으로 변환\n",
        "data = pd.DataFrame({'pre_treatment': pre_treatment, 'post_treatment': post_treatment})\n",
        "print(data)\n",
        "\n",
        "#csv 파일로 저장\n",
        "data.to_csv('non_normal_data.csv', index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yjdwim2Qqm4W",
        "outputId": "c6ac8411-6ad8-4e23-9550-5020467f0d38"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    pre_treatment  post_treatment\n",
            "0        1.696469        2.634401\n",
            "1        1.286139        2.849432\n",
            "2        1.226851        2.724455\n",
            "3        1.551315        2.611024\n",
            "4        1.719469        2.722443\n",
            "5        1.423106        2.322959\n",
            "6        1.980764        2.361789\n",
            "7        1.684830        2.228263\n",
            "8        1.480932        2.293714\n",
            "9        1.392118        2.630976\n",
            "10       1.343178        2.092105\n",
            "11       1.729050        2.433701\n",
            "12       1.438572        2.430863\n",
            "13       1.059678        2.493685\n",
            "14       1.398044        2.425830\n",
            "15       1.737995        2.312261\n",
            "16       1.182492        2.426351\n",
            "17       1.175452        2.893389\n",
            "18       1.531551        2.944160\n",
            "19       1.531828        2.501837\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#윌콕슨 부호 순위 검정 수행\n",
        "\n",
        "from scipy.stats import wilcoxon\n",
        "\n",
        "#데이터 불러오기\n",
        "data = pd.read_csv('non_normal_data.csv')\n",
        "\n",
        "#윌콕슨 부호 순위 검정 수행\n",
        "stat, p = wilcoxon(data['pre_treatment'], data['post_treatment'])\n",
        "\n",
        "#결과출력\n",
        "print('Statistic:', stat)\n",
        "print('p-value:', p)\n",
        "if p > 0.05:\n",
        "  print('Fail to reject H0')\n",
        "else:\n",
        "  print('reject H0')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SRrV4xi2uY30",
        "outputId": "1e74f68e-7d5e-46c1-c9d1-a685b5ea92b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Statistic: 0.0\n",
            "p-value: 1.9073486328125e-06\n",
            "reject H0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 분포 시각화\n",
        "fig, ax = plt.subplots()\n",
        "ax.hist(data['pre_treatment'], bins=10, alpha=0.5, label='Pre-treatment')\n",
        "ax.hist(data['post_treatment'], bins=10, alpha=0.5, label='Post-treatment')\n",
        "ax.set_title('Distribution of Pre-treatment and Post-treatment')\n",
        "ax.set_xlabel('Treatment Score')\n",
        "ax.set_ylabel('Frequency')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "jK05WASFvlxy",
        "outputId": "8cc4582f-e2cb-4c37-e8cb-a3daa9124c7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑦ 윌콕슨 부호 순위검정 - 다중검정 \n",
        ">>>- 다중검정 : 하나의 데이터 집합에서 여러 개의 가설 검정을 수행할 때 발생하는 문제를 다루는 통계 분석 기법\n",
        ">>>- 하나의 데이터 집합에서 여러 가설 검정 수행시 검정을 수행하는 만큼 오류가 발생할 가능성 높아짐\n",
        ">>>- 1종오류와 2종오류로 나뉨\n",
        ">>>- 1종오류 : 귀무가설 참, 대립가설 참 (잘못된 결론_False Positive / 효과 없는 약이 효과있다고 결론)\n",
        ">>>- 2종오류 : 귀무가설 기각 근거 충분하지 않아, 귀무가설 거짓임에도 기각하지 못하는 오류(False Negative / 새로운 약이 효과 있음에도 약의 효과 입증 못함)\n",
        ">>>- 오류 방지하기 위해 적절한 보정(Procedure) 필요\n",
        ">>>- 보정방법 : Bonferroni / Benjamini-Hochberg\n",
        ">>>- 본페로니 : 1/가설의갯수 (유의수준보다 작은 p-value 가지는 가설만 유의미하다고 판단)\n",
        ">>>- 벤자미니 : i/가설의갯수*유의수준 (p-value 작은것부터 큰것 순서대로 정렬)"
      ],
      "metadata": {
        "id": "HPTGggD80Ilx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑧ 윌콕슨 부호 순위검정 - 다중검정 실습"
      ],
      "metadata": {
        "id": "kS64IfbB23Ss"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from scipy.stats import wilcoxon\n",
        "from statsmodels.stats.multitest import multipletests\n",
        "\n",
        "#데이터불러오기\n",
        "data = pd.read_csv('treatment_data.csv')\n",
        "\n",
        "p_values = []\n",
        "\n",
        "#여러개의 가설 검정 수행 \n",
        "for i in range(10):\n",
        "  \n",
        "  #랜덤으로 데이터를 선택해서 윌콕슨 부호 순위 검정 수행\n",
        "  sample = data.sample(frac=0.5)\n",
        "  stat, p = wilcoxon(sample['pre_treatment'], sample['post_treatment'])\n",
        "  print('Sample', i+1, ':')\n",
        "  print('Statistic:', stat)\n",
        "  print('p-value:', p)\n",
        "  if p > 0.05:\n",
        "    print('fail to reject H0\\n')\n",
        "  else:\n",
        "    print('reject\\n')\n",
        "\n",
        "alpha = 0.05\n",
        "rejects_bonf, corrected_p_bonf, _, _ = multipletests(p_values, alpha=alpha, method='bonferroni')\n",
        "print(\"Bonferroni correction:\")\n",
        "\n",
        "for i in range(len(rejects_bonf)) :\n",
        " if rejects_bonf[i] :\n",
        "  print(f\"sample : {i+1} : reject HO\" )\n",
        " else :\n",
        "  print(f\"sample : {i+1} : fail to reject HO\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "YdB8GRJc02sL",
        "outputId": "2d6f7e1d-8685-410c-ddc9-41a0e2eb2eda"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sample 1 :\n",
            "Statistic: 18.0\n",
            "p-value: 0.5890107045389475\n",
            "fail to reject H0\n",
            "\n",
            "Sample 2 :\n",
            "Statistic: 24.0\n",
            "p-value: 0.76953125\n",
            "fail to reject H0\n",
            "\n",
            "Sample 3 :\n",
            "Statistic: 12.0\n",
            "p-value: 0.20866778769826422\n",
            "fail to reject H0\n",
            "\n",
            "Sample 4 :\n",
            "Statistic: 11.5\n",
            "p-value: 0.3573689804483191\n",
            "fail to reject H0\n",
            "\n",
            "Sample 5 :\n",
            "Statistic: 16.5\n",
            "p-value: 0.47130320504429746\n",
            "fail to reject H0\n",
            "\n",
            "Sample 6 :\n",
            "Statistic: 13.0\n",
            "p-value: 0.8643247819597492\n",
            "fail to reject H0\n",
            "\n",
            "Sample 7 :\n",
            "Statistic: 18.5\n",
            "p-value: 0.6310566191660882\n",
            "fail to reject H0\n",
            "\n",
            "Sample 8 :\n",
            "Statistic: 19.0\n",
            "p-value: 0.6743319349967767\n",
            "fail to reject H0\n",
            "\n",
            "Sample 9 :\n",
            "Statistic: 21.0\n",
            "p-value: 0.8561818456426022\n",
            "fail to reject H0\n",
            "\n",
            "Sample 10 :\n",
            "Statistic: 13.5\n",
            "p-value: 0.5213775161197409\n",
            "fail to reject H0\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_morestats.py:3414: UserWarning: Exact p-value calculation does not work if there are zeros. Switching to normal approximation.\n",
            "  warnings.warn(\"Exact p-value calculation does not work if there are \"\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_morestats.py:3428: UserWarning: Sample size too small for normal approximation.\n",
            "  warnings.warn(\"Sample size too small for normal approximation.\")\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ZeroDivisionError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-25-fbacb0536af3>\u001b[0m in \u001b[0;36m<cell line: 25>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0malpha\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.05\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m \u001b[0mrejects_bonf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcorrected_p_bonf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmultipletests\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'bonferroni'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Bonferroni correction:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/statsmodels/stats/multitest.py\u001b[0m in \u001b[0;36mmultipletests\u001b[0;34m(pvals, alpha, method, is_sorted, returnsorted)\u001b[0m\n\u001b[1;32m    145\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    146\u001b[0m     \u001b[0mntests\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpvals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 147\u001b[0;31m     \u001b[0malphacSidak\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1.\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0malphaf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1.\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mntests\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    148\u001b[0m     \u001b[0malphacBonf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0malphaf\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mntests\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'b'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'bonf'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'bonferroni'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mZeroDivisionError\u001b[0m: float division by zero"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>### (3) 비모수검정 - 윌콕슨 맨 휘트니"
      ],
      "metadata": {
        "id": "GA8lxBSV7X2-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ① 윌콕슨 맨 휘트니 개념\n",
        ">>>- 짝을 이룬 표본(동일한 대상의 전후 관찰) 비교할 때 사용\n",
        ">>>- 두 표본이 서로 대응되는 데이터여야 함\n",
        ">>>- 각 대응쌍에 대한 차이 구하고, 차이에 대한 순위매기기\n",
        ">>>- p-value 계산, 통계적 유의한 차이 있는지 검정"
      ],
      "metadata": {
        "id": "sjzshIBp8FJg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ② 자유도\n",
        ">>>- 샘플 크기(n) 각쌍의 순위 차이가 모두 다른 경우, tied된 경우에만 계산\n",
        ">>>- tied된 값들의 순위 중간값을 사용하여 순위 매긴 후, 공식에 따라 자유도 계산\n",
        ">>>- tied : 같은 값을 가진 데이터가 여러개 있는 경우\n",
        ">>>- 자유도 : 검정 통계량에서 제한된 정보의 양\n",
        ">>>- 검정통계량 > 자유도 : p-value 작아져서 귀무가설 기각 가능성 높음\n",
        ">>>- 자유도 높을 수록 검정의 민감도 높아짐"
      ],
      "metadata": {
        "id": "gKOgvi-38NGH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ③ 윌콕슨 맨 휘트니 검정 실습\n",
        ">>>- boxplot 이용 : 데이터의 분포를 나탄는데 사용\n",
        ">>>- 상자는 데이터의 중간 50%를 나타내고, 상자 위 아래의 선은 데이터의 범위를 나타냄"
      ],
      "metadata": {
        "id": "KFkrzcchv_RF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "from scipy.stats import wilcoxon\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#데이터 불러오기\n",
        "data = pd.read_csv('treatment_data.csv')\n",
        "\n",
        "#두 변수 간의 차이 검정\n",
        "stat, p = wilcoxon(data['pre_treatment'], data['post_treatment'])\n",
        "\n",
        "#검정 결과 시각화\n",
        "sns.boxplot(data=data[['pre_treatment', 'post_treatment']])\n",
        "sns.stripplot(data=data[['pre_treatment', 'post_treatment']], color=\".3\", size=4)\n",
        "sns.despine(trim=True)\n",
        "if p > 0.05:\n",
        "  plt.title('Wilcoxon signed-rank test\\nSame distribution\\np-value=%.3f' % (p))\n",
        "else:\n",
        "  plt.title('Wilcoxon signed-rank test\\nDifferent distribution\\np-value=%.3f' % (p))\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "vikKXc-J4zRs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 587
        },
        "outputId": "4115e304-6377-4f57-e97a-4a29aa861575"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_morestats.py:3414: UserWarning: Exact p-value calculation does not work if there are zeros. Switching to normal approximation.\n",
            "  warnings.warn(\"Exact p-value calculation does not work if there are \"\n",
            "/usr/local/lib/python3.10/dist-packages/seaborn/categorical.py:166: FutureWarning: Setting a gradient palette using color= is deprecated and will be removed in version 0.13. Set `palette='dark:.3'` for same effect.\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ③ 윌콕슨 / 윌콕슨-맨휘트니/맨휘트니 차이점\n",
        ">>>- 윌콕슨 부호 순위 검정 : 단일 집단에서 기준으로 두 개의 표본을 비교하는 검정 방법 (정규분포 안따라도 가능)\n",
        ">>>- 윌콕슨-맨-휘트니 : 두 개 집단에서 랜덤 샘플 추출해서 순위매긴 후, 각 집단 순위합을 비교 (정규분포 안따라도 가능) / 두개 집단이 독립적이지 않음\n",
        ">>>- 맨-휘트니 : 윌콕슨 맨휘트니와 같으나 두개 집단이 독립적임"
      ],
      "metadata": {
        "id": "ZMg5zxWz8eaz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>### (4) 맨휘트니 검정\n",
        ">>>- 두개의 독립된 집단에서 관찰된 두 변수 간의 차이를 비교하는 비모수적 방법\n",
        ">>>- t-test와 유사하고 두 변수가 정규분포 따를때 사용함\n",
        ">>>- 두 변수의 분포형태에 대한 가정이 필요없음\n",
        ">>>- 가장 보편적으로 사용되는 방법\n",
        ">>>- 주어진 데이터를 하나의 순위화 데이터로 변환해서 어느 집단에 속하는지 판단 후, 동점 발생시 랜덤 결정"
      ],
      "metadata": {
        "id": "iaCL9OdZ-LxH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ① 맨휘트니 검정 실습\n",
        ">>>- 두집단의 독립적 표본으로 비교하는 비모수적인 검정 방법 중 하나\n",
        ">>>- 모집단이 정규분포 따르지 않거나, 동일하지 않은 경우에도 사용가능\n",
        ">>>- 가정1 : 각각의 집단은 서로 독립적이다.\n",
        ">>>- 가정2 : 각각의 집단에서 추출된 샘플은 서로 독립적이며, 서로 상호교환 가능함\n",
        ">>>- 가정3 : 두 집단은 서로 다른 분포 따를 가능성 있다\n",
        ">>>- 가정4 : 두 집단 분포는 등분산 가정하지 않음 "
      ],
      "metadata": {
        "id": "Lw0F-sh8-42F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#데이터 불러오기\n",
        "data = pd.read_csv('Mann-Whitney_sample_data.csv')\n",
        "\n",
        "#두 집단 간의 차이 검정\n",
        "stat, p = mannwhitneyu(data['group1'], data['group2'])\n",
        "\n",
        "#결과 출력\n",
        "print('Statistic:', stat)\n",
        "print('p-value:', p)\n",
        "if p > 0.05:\n",
        "  print('fail to reject H0')\n",
        "else:\n",
        "  print('reject H0')"
      ],
      "metadata": {
        "id": "AWB2rjwiA4DJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#검정 결과 시각화 \n",
        "sns.boxplot(data=data[['group1, 'group2']], palette=\"Set3\")\n",
        "sns.stripplot(data=data[['group1', 'group2']], color=\".3\", size=4)\n",
        "sns.despine(trim=True)\n",
        "if p > 0.05:\n",
        "  plt.title('Mann-Whitney test\\nSame distribution\\np-value=%.3f' % (p))\n",
        "else:\n",
        "  plt.title('Mann-Whitney test\\nDifferent distribution\\np-value=%.3f' % (p))\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "H4OGvnSm4HmN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ② 맨휘트니 검정 : 등분산성 가정\n",
        ">>>- 두 집단의 분산이 같음을 가정함\n",
        ">>>- 등분산성 위배 : 검정 결과의 부정확 / 왜곡도 상승\n",
        ">>>- 등분산성 위배시 대안가능한 검정방법 : welch''s t-test"
      ],
      "metadata": {
        "id": "t5aicbmY7an5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ③ 맨휘트니 검정 등분산성 가정 실습\n",
        ">>>- 레빈 검정(Levene's Test) 이용\n",
        ">>>- 두개 이상의 그룹간 분산이 동일한지 검정하는 검정방법 중 하나\n",
        ">>>- 두개 이상의 그룹산 분산이 동일하지 않은 경우 사용 / 등분산성 가정 위반시 t-검정/ANOVA 분석 수행 불가"
      ],
      "metadata": {
        "id": "4kOi6Xhz7a5e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from scipy.stats import levene\n",
        "\n",
        "# 데이터불러오기\n",
        "data = pd.read_csv('Mann-Whiteney_sample_data.csv')\n",
        "print(data)\n",
        "\n",
        "# 등분산성 검정\n",
        "stat, p = levene(data['group1'], data['group2'])\n",
        "\n",
        "# 결과출력\n",
        "print('Statistic:', stat)\n",
        "print('p-value:', p)\n",
        "if p > 0.05:\n",
        "  print('fail to reject H0')\n",
        "else:\n",
        "  print('reject H0')"
      ],
      "metadata": {
        "id": "s8WuRLAq-5Xq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ④ 맨휘트니 검정 : 윌콕슨-맨-휘트니 감정 통계량 계산\n",
        ">>>- 두 집단 관측값을 합쳐 등수(rank) 매긴후 감정통계량(U통계량) 계산\n",
        ">>>- 순서1 : 두 집단 관측값 합쳐서 작은 순서대로 나열\n",
        ">>>- 순서2 : 각 집단의 순위 합 계산\n",
        ">>>- 순서3: U통계량은 두 집단 중에서 작은 쪽 집단의 순위합 : 두 집단 크기 같으면 U1, U2 중 작은쪽 선택"
      ],
      "metadata": {
        "id": "XG5labsiBHdD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑤ 맨휘트니 검정 : 윌콕슨-맨-휘트니 감정 통계량 계산 실습"
      ],
      "metadata": {
        "id": "tSNhqCCFCKVU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Example Data\n",
        "group1 = [3,2,5,1,4,2,7,9,8]\n",
        "group2 = [6,4,7,2,6,3,7,9,10,11]\n",
        "\n",
        "#맨휘트니 계산\n",
        "statistic, p_value = mannwhitneyu(group1, group2)\n",
        "\n",
        "print(\"Mann-Whitney U stitstic:\", statistic)\n",
        "print(\"p-value:\", p_value)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kjya30O1Bs7Z",
        "outputId": "d37396f1-9ce5-4471-fd72-e2d14109b5e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mann-Whitney U stitstic: 28.5\n",
            "p-value: 0.18907343999681014\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑥ 맨휘트니 검정 : 윌콕슨-맨-휘트니 통계량 이용한 p-value 계산\n",
        ">>>- 맨휘트니 검정에서 p-value : U통계량 이용하여 계산\n",
        ">>>- U통계량 : 각 그룹에서 다른 그룹의 값 보다 높은 순위의 개수 합산"
      ],
      "metadata": {
        "id": "WhB-PD42CxgU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑦ 맨휘트니 검정 : 윌콕슨-맨-휘트니 통계량 이용한 p-value 계산 실습"
      ],
      "metadata": {
        "id": "B36Z-C5ZDSaY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from scipy.stats import mannwhitneyu\n",
        "from scripy import stats\n",
        "\n",
        "#데이터 불러오기\n",
        "data = pd.read_csv('Mann-Whitney-Test_sample_data.csv')\n",
        "\n",
        "#두 집단 간의 차이 검정\n",
        "stat, p = mannwhitneyu(data['group1'], data['group2'])\n",
        "\n",
        "#두 집단의 크기 계산\n",
        "n1, n2 = len(data['group1'], len(data['group2']))\n",
        "\n",
        "#U값이 클 때는 U 값 대신 (n1*n2-U) 값을 사용\n",
        "if stat > n1 * n2 / 2:\n",
        "  stat = n1 * n2 - stat\n",
        "\n",
        "#p-value계산\n",
        "p_value = 2 * stats.norm.cdf(-abs(stat) / np.sqrt(n1*n2*(n1+n2+1)/12))\n",
        "\n",
        "print('Mann-Whitney U statistic\"', stat)\n",
        "print('p-value:', p_value)"
      ],
      "metadata": {
        "id": "mEl7ucHqC3PV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑧ 맨휘트니 검정 예시 : 두 집단 수면 시간에 대한 차이가 있는지 확인할 때\n",
        ">>>- 데이터는 랜덤하게 100개의 두 집단 데이터로 생성되었음\n",
        ">>>- 두 집단 간의 수면시간 차이가 있는지 확인"
      ],
      "metadata": {
        "id": "sYe_bOPDDCRS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy.stats import mannwhitneyu\n",
        "\n",
        "#랜덤 데이터 생성\n",
        "np.random.seed(42)\n",
        "group1 = np.random.normal(loc=6, scale=1.5, size=100)\n",
        "group2 = np.random.normal(loc=7, scale=1.5, size=100)\n",
        "\n",
        "#csv 파일로 저장\n",
        "data = pd.DataFrame({'group1': group1, 'group2' : group2})\n",
        "data.to_csv('sleep_data.csv', index= False)\n",
        "\n",
        "#csv 데이터 읽기\n",
        "data = pd.read_csv('sleep_data.csv')\n",
        "\n",
        "group1_data = data['group1']\n",
        "group2_data = data['group2']\n",
        "\n",
        "#맨-휘트리 검정 수행\n",
        "stat, p_value = mannwhitneyu(group1_data, group2_data, alternative='two-sided')\n",
        "\n",
        "#결과출력\n",
        "print('Mann-Whitney U statistic:', stat)\n",
        "print('p-value:', p_value)\n",
        "\n",
        "#유의수준 0.05로 가설검정\n",
        "if p_value < 0.05:\n",
        "  print('두 집단 간의 유의한 차이가 있습니다.')\n",
        "else:\n",
        "  print('두 집단 간의 유의한 차이가 없습니다.')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GByDR-l_DO37",
        "outputId": "923c414e-a1af-44cd-e39e-623cc4a007fb"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mann-Whitney U statistic: 2834.0\n",
            "p-value: 1.2154388166891524e-07\n",
            "두 집단 간의 유의한 차이가 있습니다.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑨ 맨 휘트니 검정 한계\n",
        ">>>- 모집단 분포가 완전히 다를 때 검정력이 떨어짐\n",
        ">>>- 대응 표본(샘플이 서로 독립적이지 않을때)에 대해서는 사용하기 어려움"
      ],
      "metadata": {
        "id": "iFQ5ceNzE54B"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>### (5) 크러스칼-왈리스(Kruskal-Wallis)검정의 개념 이해"
      ],
      "metadata": {
        "id": "XmwaohhHGhx5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ① 크러스칼-왈리스 검정의 개념\n",
        ">>- 3개 이상의 독립된 집단에서 비모수적으로 변수간 차이(모집단 분포에 대한 가설검증시)를 검정하는 방법\n",
        ">>- 정규분포/비정규분포 데이터 모두 사용 가능\n",
        ">>- 검정은 각 집단 순위합 비교 후 집단 간 차이가 있는지 여부 검정"
      ],
      "metadata": {
        "id": "rVfKYvA6HjTF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ② 크러스칼-왈리스 <-> ANOVA 차이점\n",
        ">>>- 모두 여러개 집단 간에 차이가 있는지 검정하는 방법\n",
        ">>>- ANOVA 모든 집단이 정규분포 따르고 분산이 서로 같다는 가정하고 진행\n",
        ">>>- Kruskal 정규분포 따르지 않는 비모수적인 방법. 데이터 분포 가정 없음\n",
        ">>>- 데이터 분포 대칭/이상치 없을때 : ANOVA로 검정\n",
        ">>>- 데이터 분포 비대칭/이상치 있을때 : Kruskall 검정"
      ],
      "metadata": {
        "id": "Bj5Bu-obHp-v"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ③ 크러스칼-왈리스 검정 절차 이해\n",
        ">>>- 가설설정 : 검정 목적에 맞는 귀무가설, 대립가설 설정\n",
        ">>>- 유의수준 결정\n",
        ">>>- 데이터 입력\n",
        ">>>- 순위부여\n",
        ">>>- 집단별 순위 합계 계산\n",
        ">>>- 전체 순위 합계 계산\n",
        ">>>- 크러스칼-월리스 검정 통계량 계산\n",
        ">>>- p-value 계산\n",
        ">>>- 결과 해석"
      ],
      "metadata": {
        "id": "2Lo0kT7-ISJe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ④ 크러스칼-왈리스 검정 수행하기 조건\n",
        ">>>- 독립변수와 종속변수 간의 관계 선형적\n",
        ">>>- 독립변수는 모두 서로 독립이어야 함\n",
        ">>>- 종속변수의 잔차는 정규분포 따라야함\n",
        ">>>- 독립변수간 공분산 같아야함"
      ],
      "metadata": {
        "id": "h1Uxvi7mIlcm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑤ 크러스칼-왈리스 검정 실습"
      ],
      "metadata": {
        "id": "UK8GHrKWI1Ax"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.stats import kruskal\n",
        "\n",
        "#데이터생성\n",
        "np.random.seed(1)\n",
        "group1 = np.random.normal(loc=5, scale=1, size=20)\n",
        "group2 = np.random.normal(loc=7, scale=1, size=25)\n",
        "group3 = np.random.normal(loc=10, scale=1, size=15)\n",
        "\n",
        "#kruskal-wallis 검정 수행\n",
        "H, p_value = kruskal(group1, group2, group3)\n",
        "\n",
        "#결과출력\n",
        "print(\"Kruskal-Wallis H 검정 통계량:\", H)\n",
        "print(\"p-value:\", p_value)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PKVLAyAvEmhS",
        "outputId": "aa6eb69c-dfdf-4205-8c72-fc4710e5270f"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Kruskal-Wallis H 검정 통계량: 46.584295081967184\n",
            "p-value: 7.6621182690351e-11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑥ 크러스칼-왈리스 검정 : 사후분석(사후비교)\n",
        ">>>- 어떤 그룹들이 중앙값이 다른지 알아내야함\n",
        ">>>- 실험에서 통계적으로 유의한 차이가 있는 경우 수행됨\n",
        ">>>- 방법 : Tukey's HSD, Bonferronu, Scheffe "
      ],
      "metadata": {
        "id": "yF5vtk16JnWW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑦ 크러스칼-왈리스 검정 한계 이해\n",
        ">>>- 데이터 너무 적을때 문제 발생가능\n",
        ">>>- 극단적인 값 존재할 때 문제 발생가능\n",
        ">>>- 데이터가 비대칭일 때 문제 발생가능\n",
        ">>>- 대응비교(같은 표본에 대한 여러가지 조건비교) 불가"
      ],
      "metadata": {
        "id": "meIz0LL8KC57"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>### (6) 프리드만 검정(Friedman Test)"
      ],
      "metadata": {
        "id": "Re16nn4fKowP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ① 프리드만 검정 개념\n",
        ">>>- 3개 이상의 집단에서 비모수적 독립성 검정 수행\n",
        ">>>- 순위차이를 이용한 검정\n",
        ">>>- 반복측정설계에서 여러조건에서 측정한 데이터 분석시 사용"
      ],
      "metadata": {
        "id": "myozV6ZlNJ4F"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ② 프리드만 - 크러스칼왈리스 비교\n",
        ">>>- 공통점 : 3개 이상 집단간 차이를 비교하는 비모수 검정 방법\n",
        ">>>- 크러스칼 : 3개 이상 분포 모두 같은지 검정하여, 크기제한 없이 독립적 데이터 대상으로 진행. 순위합 평균 이용 분포\n",
        ">>>- 프리드만 : 독립적, 대응표본 모두 가능, 각 처리에 대한 순위평균 비교"
      ],
      "metadata": {
        "id": "cZ6J4wk0N1ln"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ③ 프리드만 절차\n",
        ">>>- 가설수립\n",
        ">>>- 데이터 취합 : 서열척도 사용하여 처리별 관측값 측정\n",
        ">>>- 데이터변환 : 각 처리내에서 순위매김\n",
        ">>>- 순위 합계 계산 : 처리에 대한 순위합계 계산\n",
        ">>>- 통계량 계산\n",
        ">>>- 유의확률 계산\n",
        ">>>- 검정결과 해석\n",
        "\n"
      ],
      "metadata": {
        "id": "S50t_oPzOV8X"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ④ 프리드만 결과해석 방법\n",
        ">>>- 검정통계량 자유도(k-1) 계산\n",
        ">>>- 유의확률 계산\n",
        ">>>- 결론도출 (유의수준 0.05)"
      ],
      "metadata": {
        "id": "vsTBKOsbO4XO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑤ 프리드만 실습\n",
        ">>>- 박스플롯 이용해 수직 표시하여 분포 비교 후 유의미한 차이 있는지 확인"
      ],
      "metadata": {
        "id": "DcO6ZcFqPCfp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.stats import friedmanchisquare\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#데이터 생성\n",
        "np.random.seed(1)\n",
        "group1 = np.random.normal(loc=10, scale=2, size=10)\n",
        "group2 = np.random.normal(loc=12, scale=2, size=10)\n",
        "group3 = np.random.normal(loc=15, scale=2, size=10)\n",
        "data = np.stack([group1, group2, group3], axis=1)\n",
        "\n",
        "#프리드만 검정 수행\n",
        "statistic, pvalue = friedmanchisquare(*data.T)\n",
        "print(\"프리드만 검정 결과\")\n",
        "print(f\"검정 통계량: {statistic}\")\n",
        "print(f\"p=value: {pvalue}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bGXo5GenJgul",
        "outputId": "356463a9-cb60-4b76-d1ae-3eb7153eee10"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "프리드만 검정 결과\n",
            "검정 통계량: 11.400000000000006\n",
            "p=value: 0.003345965457471265\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#박스플롯 시각화\n",
        "fig, ax = plt.subplots()\n",
        "ax.boxplot(data)\n",
        "ax.set_xticklabels(['Group1', 'Group2', 'Group3'])\n",
        "ax.set_ylabel('Value')\n",
        "ax.set_title('Friedman Test Result')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "utzUfhVsPgE4",
        "outputId": "22e41658-6a5f-4e99-a758-e5886af4fc3b"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑥ 프리드만 한계 - 다중비교\n",
        ">>>- 다중비교문제 : 어떤 처리간의 평균 순위 차이 있는지 구체적으로 알수없는 단점\n",
        ">>>- 사후분석 : 다중비교문제 해결 원할때 사용\n",
        ">>>- 엄격한 사후분석 : Bonferroni correction\n",
        ">>>- 느슨한 사후분석 : False discovery rate(FDR)\n",
        ">>>- FDR : 각 검정의 p-value값을 기반으로 임계갑(alpha) 초과하는지점 찾아내기"
      ],
      "metadata": {
        "id": "emqWtiZqQegE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑦ 프리드만 한계\n",
        ">>>- 정규분포 가정 : 비대칭 분포에도 사용할 수 있으나 검정력 떨어질 수 있음\n",
        ">>>- 자료 수 적을때 검정력떨어짐\n",
        ">>>- 매개 변수 가정 : 매개변수가 순위형태일때만 사용가능하여, 연속형 변수 아닌경우 사용하기 어려움"
      ],
      "metadata": {
        "id": "zA6Wd4C0RZnW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">>>#### ⑧ 프리드만 활용 사례\n",
        ">>>- 의료 : 3개이상 독립적 집단에서 관찰된 결과 순위 비교하는데 사용하는 비모수 검정 방법(약물, 치료법 효과 비교시 사용)\n",
        ">>>- 심리학 : 특정 훈련 방법이 의도한대로 작동하는지 확인하기 위해 여러 그룹에서 수행/결과 비교시 사용\n",
        ">>>- 교육 : 교육방법의 효과 비교시 사용 / 프로그램 수강생의 시험점수 비교시 사용가능"
      ],
      "metadata": {
        "id": "OXASwEAwRv1w"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "---"
      ],
      "metadata": {
        "id": "Ust5R7b9ShYu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2. 비모수 검정의 가정과 검증방법 정리"
      ],
      "metadata": {
        "id": "0MQaXN67SeTV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">## 1) 비모수 검정\n",
        ">- 모집단 분포에 대한 가정하지 않는 검정방법"
      ],
      "metadata": {
        "id": "DYILCXjiSiwF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">## 2) 정규성검정: 비모수검정 수행 전 정규분포 확인\n",
        ">- 시각적방법 : 히스토그램, QQplot \n",
        ">- Shapiro-Wilk : p-value가 유의수준보다 작으면 정규분포 따르지 않는 것\n",
        ">- Kolmogorov-Smirnov : 정규분포 따르는지 검사, 정규분포 따르는 경우 유의수준 낮게 나올 수 있어서 주의해야함"
      ],
      "metadata": {
        "id": "iEDX6-jqSsu-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">## 3) 등분산성검정 : 비모수검정의 가정 중 하나\n",
        ">- 각 그룹의 분산이 같은지 검정\n",
        ">- 등분산성 성립안하면 검정결과 오류발생 가능\n",
        ">- F-test 이용 : 표본분산값의 비율(F) 계산\n",
        ">- Levene's test : 각 그룹 평균값으로 검정 수행\n",
        ">- Bartlett's test : 각 그룹이 동일한 샘플 있다는 가정하게 그룹 분산 동일한지 검정"
      ],
      "metadata": {
        "id": "shyeB6FOTI53"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">## 4) 이상치검정\n",
        ">- 정규분포 따르지 않거나 모집단 분포에 대한 가정 어려운 경우 사용\n",
        ">- 이상치(outlier) 있는 경우 검정 결과 왜곡되기 때문에 이상치 제거하거나 수정해야함\n",
        ">- 방법1 : 사분위범위(IQR) 이용한 이상치 판단\n",
        ">- 방법2 : 표준점수(Z-score) 이용한 이상치 판단\n",
        ">- 방법3 : 그래프 이용한 이상치 판단"
      ],
      "metadata": {
        "id": "SiTOGnx6T1Bl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">## 5) 귀무가설 및 대립가설 설정 및 검증\n",
        ">- 귀무가설 : 두 그룹 분포 동일함 가정\n",
        ">- 대립가설 : 두 그룹 분포 다름 가정\n",
        ">- 대부분의 비모수 검정 : 귀무가설 기각되는 경우 유의한 차이 있을 것으로 가정(p-value<유의수준)"
      ],
      "metadata": {
        "id": "DP4mahB1UM6r"
      }
    }
  ]
}
